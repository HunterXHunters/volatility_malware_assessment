 #! /bin/bash

# Hunter x Hunter's Memory Forensics
# Script to autorun volatility plugins

echo "Hunter x Hunter's Memory Forensics"
echo "Volatility Script"
echo ""
echo "Usage: vol.sh <Memory Image>"
echo ""
echo "Example: ./vol.sh memory_image.raw"
echo ""

#Start of Vol Script

echo "******************************************"

echo "**Vol Script Started**"

echo "******************************************"

#

echo "Plugin results will be saved to the /results folder"
echo "File extracted from memory will be saved to the /exports folder"
echo ""

# SETUP OPERATIONS

mkdir results
mkdir exports

res=results
exp=exports

echo ""
echo "Identifiying the KDBG signature with imageinfo, results pending"
echo ""

date > $res/imageinfo_"$1"_.txt

#Command to Identify Image Information and write output to a file
vol.py -f $1 imageinfo | tee -a $res/imageinfo_"$1"\_.txt
echo ""
echo "Etner the KDBG signature to use for this memory image, example Win2012R2SP1"
read kdbg
echo ""
echo "The operating system profile selected is: --profile "$kdbg

#Sends all errors to NUL
exec 2>/dev/null


# PLUGIN TO IDENTIFY ROUGUE PROCESSES
echo ""
echo "pslist plugin running, results pending"
vol.py -f $1 --profile=$kdbg pslist > $res/pslist_$1\_.txt
echo ""
echo "psscan completed"

echo ""
echo"pslist completed"
echo ""
echo "psscan plugin running, results pending"
vol.py -f $1 --profile=$kdbg psscan > $res/psscan_$1\_.txt
echo ""
echo "psscan completed"

echo ""
echo "pstree plugin running, results pending"
vol.py -f $1 --profile=$kdbg pstree > $res/pstree_$1\_.txt
echo ""
echo "pstree completed"

echo ""
echo "psxview plugin running, results pending"
vol.py -f $1 --profile=$kdbg psxview > $res/psxview_$S1\_.txt
echo "psxview completed"

echo ""

echo "Searching pslist results, results pending"
echo ""
grep -E -i "(system|wininit|lsass|lsaiso|lsm|services)" $res/pslist_$1\_.txt > $res/pslist_singletons_$1\_.txt
grep -E -i "(system|wininit|lsass|lsaiso|lsm|services|sms|taskhost|winlogon|iexplorer|explorer|svchost|csrss)" $res/pslist_$1\_.txt > $res/pslist_windowscore_$1\_.txt
grep -E -i -v "(system|wininit|lsass|lsaiso|lsm|services|sms|taskhost|winlogon|iexplorer|explorer|svchost|csrss)" $res/pslist_$1\_.txt > $res/pslist_exclude_windowscore_$1\_.txt

echo "pslist search completed"
echo ""

# PLUGIN TO IDENTIFY NETWORK ARTIFACTS
echo "netscan plugin running, results pending"
vol.py -f $1 --profile=$kdbg netscan > $res/netscan_$s1\_.txt
echo "netscan completed"

echo ""
#

# FINDING MALWARE LOADED IN MEMORY

echo ""
echo "malfind plugin running, results pending"
echo ""

vol.py -f $1 --profile=$kdbg malfind > $res/malfind_$1\_.txt
echo ""
echo "malfind completed"

echo ""

#Malfind plugin to extract possible executables
echo ""
echo "Using Malfind to extract possible executables inside processess (Process_Injection), pending results"
echo ""

vol.py -f $1 --profile=$kdbg malfind -D $exp
file $exp/* > $res/malfind_file_check_$1\.txt
echo ""
echo "Malfind export completed"
echo ""
#
echo "Extracting executable from Kernal memory, results pending"
echo ""
vol.py -f $1 --profile=$kdbg moddump -D $exp
echo "modscan completed"
echo ""

echo "Extracting DLLs from memory, results pending"
echo ""
vol.py -f $1 --profile=$kdbg dlldump -D $exp
echo "DLLdump completed"
echo ""

echo "Checking for exported executables with Clamsscan, results pending"
echo ""

clamscan $exp | grep -v": OK$" >$res/clamscan_$1\_.txt
echo ""
echo "Clamscan completed"


echo ""
echo "Hashing MD5 exported files, results pending"
echo ""

md5sum $exp/*> $res/md5_exported_$1\.txt
cut -d " " -f1 $res/md5_exported_$1\.txt >  $res/md5_exported_justMD5_$1\_.txt
echo ""
echo "MD5 hashing completed"
echo ""

echo ""


echo "dllist plugin running, results pending"
echo ""
vol.py -f $1 --profile=$kdbg dlllist > $res/dlllist_$1\_.txt
echo ""
echo "dlllist completed"

echo ""

echo ""
echo "shimcache plugin running, results pending"
echo ""
vol.py -f $1 --profile=$kdbg shimcache > $res/shimcache_$1\_.txt
echo ""
echo "shimcache completed"

echo ""

echo ""
echo "shimcachemem plugin running, results pending"
echo ""
vol.py -f $1 --profile=$kdbg shimcachemem > $res/shimcache_mem_$1\_.txt
echo ""
echo "shimcachemem completed"



echo ""
echo "Master File Table plugin running, results pending"
echo ""

vol.py -f $1 --profile=$kdbg mftparser > $res/mftparser_$1\_.txt
echo ""
echo "mtfparser completed"

echo ""

echo "Running script to normalise data of mftparser"
vol.py -f $1 --profile=$kdbg msfparser --output=body | mactime -d -z UTC-0 > $res/mftparser_normalized_$1\_.csv
echo ""
echo "normalisation completed"

echo ""

echo "End of HxH script"
